'use client';

import { useState } from 'react';
import { useDreamJournal } from '../hooks/useDreamJournal';
import { DreamJournalEntry, XpRewardConfig } from '../types/journal';

export function JournalManager() {
  const { 
    entries, 
    stats, 
    streak,
    xpConfig, 
    setXpConfig, 
    exportJournal, 
    importJournal,
    deleteEntry,
    addEntry 
  } = useDreamJournal();

  const [selectedEntries, setSelectedEntries] = useState<string[]>([]);
  const [importData, setImportData] = useState('');
  const [showImport, setShowImport] = useState(false);
  const [showXpConfig, setShowXpConfig] = useState(false);
  const [localXpConfig, setLocalXpConfig] = useState<XpRewardConfig>(xpConfig);

  const handleSelectAll = () => {
    if (selectedEntries.length === entries.length) {
      setSelectedEntries([]);
    } else {
      setSelectedEntries(entries.map(e => e.id));
    }
  };

  const handleSelectEntry = (id: string) => {
    setSelectedEntries(prev => 
      prev.includes(id) 
        ? prev.filter(entryId => entryId !== id)
        : [...prev, id]
    );
  };

  const handleBulkDelete = () => {
    if (selectedEntries.length === 0) return;
    
    const confirmed = confirm(`Delete ${selectedEntries.length} selected entries? This cannot be undone.`);
    if (confirmed) {
      selectedEntries.forEach(id => deleteEntry(id));
      setSelectedEntries([]);
    }
  };

  const handleImport = () => {
    try {
      const result = importJournal(importData);
      if (result.success) {
        alert(`Import successful! ${result.imported} entries imported.`);
        if (result.errors.length > 0) {
          console.warn('Import warnings:', result.errors);
        }
        setImportData('');
        setShowImport(false);
      } else {
        alert(`Import failed: ${result.errors.join(', ')}`);
      }
    } catch (error) {
      alert(`Import error: ${error}`);
    }
  };

  const handleSaveXpConfig = () => {
    setXpConfig(localXpConfig);
    setShowXpConfig(false);
    alert('XP configuration saved!');
  };

  const resetStreak = () => {
    if (confirm('Reset the dream streak? This cannot be undone.')) {
      // This would need to be implemented in the hook
      alert('Streak reset functionality would be implemented here.');
    }
  };

  const generateTestEntry = () => {
    const testEntry: Omit<DreamJournalEntry, 'id' | 'xpEarned' | 'createdAt' | 'updatedAt'> = {
      title: `Test Dream Entry ${Date.now()}`,
      date: new Date().toISOString().split('T')[0],
      content: 'This is a test dream entry generated by the Control Nexus.',
      tags: ['test', 'generated'],
      companions: [],
      places: ['Test Realm'],
      mood: 'neutral',
      lucidity: 'none',
      vividness: 5,
      media: [],
    };
    
    addEntry(testEntry);
    alert('Test entry created!');
  };

  return (
    <div className="journal-manager space-y-6">
      <div className="bg-slate-900/60 rounded-xl border border-slate-700/60 p-6 backdrop-blur-sm">
        <h2 className="text-2xl font-bold text-slate-100 mb-6">üìñ Journal Manager</h2>
        
        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="bg-slate-800/60 rounded-lg p-4">
            <div className="text-xl font-bold text-blue-400">{stats.totalEntries}</div>
            <div className="text-sm text-slate-400">Total Entries</div>
          </div>
          
          <div className="bg-slate-800/60 rounded-lg p-4">
            <div className="text-xl font-bold text-purple-400">{stats.totalXpEarned.toLocaleString()}</div>
            <div className="text-sm text-slate-400">Total XP</div>
          </div>
          
          <div className="bg-slate-800/60 rounded-lg p-4">
            <div className="text-xl font-bold text-orange-400">{streak.current}/{streak.longest}</div>
            <div className="text-sm text-slate-400">Current/Best Streak</div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-wrap gap-3 mb-6">
          <button
            onClick={exportJournal}
            className="px-4 py-2 bg-blue-600/20 border border-blue-400/40 text-blue-200 rounded-lg hover:bg-blue-600/30 transition-colors"
          >
            üì• Export Journal
          </button>
          
          <button
            onClick={() => setShowImport(!showImport)}
            className="px-4 py-2 bg-green-600/20 border border-green-400/40 text-green-200 rounded-lg hover:bg-green-600/30 transition-colors"
          >
            üì§ Import Journal
          </button>
          
          <button
            onClick={() => setShowXpConfig(!showXpConfig)}
            className="px-4 py-2 bg-purple-600/20 border border-purple-400/40 text-purple-200 rounded-lg hover:bg-purple-600/30 transition-colors"
          >
            ‚öôÔ∏è XP Config
          </button>
          
          <button
            onClick={resetStreak}
            className="px-4 py-2 bg-orange-600/20 border border-orange-400/40 text-orange-200 rounded-lg hover:bg-orange-600/30 transition-colors"
          >
            üî• Reset Streak
          </button>
          
          <button
            onClick={generateTestEntry}
            className="px-4 py-2 bg-yellow-600/20 border border-yellow-400/40 text-yellow-200 rounded-lg hover:bg-yellow-600/30 transition-colors"
          >
            üß™ Test Entry
          </button>
        </div>

        {/* Import Panel */}
        {showImport && (
          <div className="bg-slate-800/60 rounded-lg p-4 mb-6">
            <h3 className="text-lg font-semibold text-slate-200 mb-3">Import Journal Data</h3>
            <textarea
              value={importData}
              onChange={(e) => setImportData(e.target.value)}
              placeholder="Paste JSON data here..."
              rows={6}
              className="w-full bg-slate-700/60 border border-slate-600/40 rounded-lg p-3 text-slate-200 placeholder-slate-400 focus:border-purple-400/60 focus:outline-none focus:ring-2 focus:ring-purple-400/20"
            />
            <div className="flex gap-3 mt-3">
              <button
                onClick={handleImport}
                disabled={!importData.trim()}
                className="px-4 py-2 bg-green-600/20 border border-green-400/40 text-green-200 rounded-lg hover:bg-green-600/30 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Import
              </button>
              <button
                onClick={() => setShowImport(false)}
                className="px-4 py-2 bg-slate-600/20 border border-slate-400/40 text-slate-200 rounded-lg hover:bg-slate-600/30 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        )}

        {/* XP Configuration Panel */}
        {showXpConfig && (
          <div className="bg-slate-800/60 rounded-lg p-4 mb-6">
            <h3 className="text-lg font-semibold text-slate-200 mb-3">XP Reward Configuration</h3>
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block text-sm text-slate-300 mb-1">Base Entry XP</label>
                <input
                  type="number"
                  value={localXpConfig.baseEntry}
                  onChange={(e) => setLocalXpConfig(prev => ({ ...prev, baseEntry: parseInt(e.target.value) || 0 }))}
                  className="w-full bg-slate-700/60 border border-slate-600/40 rounded px-3 py-2 text-slate-200"
                />
              </div>
              
              <div>
                <label className="block text-sm text-slate-300 mb-1">Lucid Tag Bonus</label>
                <input
                  type="number"
                  value={localXpConfig.lucidTag}
                  onChange={(e) => setLocalXpConfig(prev => ({ ...prev, lucidTag: parseInt(e.target.value) || 0 }))}
                  className="w-full bg-slate-700/60 border border-slate-600/40 rounded px-3 py-2 text-slate-200"
                />
              </div>
              
              <div>
                <label className="block text-sm text-slate-300 mb-1">Ritual Tag Bonus</label>
                <input
                  type="number"
                  value={localXpConfig.ritualTag}
                  onChange={(e) => setLocalXpConfig(prev => ({ ...prev, ritualTag: parseInt(e.target.value) || 0 }))}
                  className="w-full bg-slate-700/60 border border-slate-600/40 rounded px-3 py-2 text-slate-200"
                />
              </div>
              
              <div>
                <label className="block text-sm text-slate-300 mb-1">Panty Tag Bonus</label>
                <input
                  type="number"
                  value={localXpConfig.pantyTag}
                  onChange={(e) => setLocalXpConfig(prev => ({ ...prev, pantyTag: parseInt(e.target.value) || 0 }))}
                  className="w-full bg-slate-700/60 border border-slate-600/40 rounded px-3 py-2 text-slate-200"
                />
              </div>
              
              <div>
                <label className="block text-sm text-slate-300 mb-1">Temple Tag Bonus</label>
                <input
                  type="number"
                  value={localXpConfig.templeTag}
                  onChange={(e) => setLocalXpConfig(prev => ({ ...prev, templeTag: parseInt(e.target.value) || 0 }))}
                  className="w-full bg-slate-700/60 border border-slate-600/40 rounded px-3 py-2 text-slate-200"
                />
              </div>
              
              <div>
                <label className="block text-sm text-slate-300 mb-1">Streak Bonus XP</label>
                <input
                  type="number"
                  value={localXpConfig.streakBonus}
                  onChange={(e) => setLocalXpConfig(prev => ({ ...prev, streakBonus: parseInt(e.target.value) || 0 }))}
                  className="w-full bg-slate-700/60 border border-slate-600/40 rounded px-3 py-2 text-slate-200"
                />
              </div>
            </div>
            
            <div className="flex gap-3">
              <button
                onClick={handleSaveXpConfig}
                className="px-4 py-2 bg-purple-600/20 border border-purple-400/40 text-purple-200 rounded-lg hover:bg-purple-600/30 transition-colors"
              >
                Save Configuration
              </button>
              <button
                onClick={() => {
                  setLocalXpConfig(xpConfig);
                  setShowXpConfig(false);
                }}
                className="px-4 py-2 bg-slate-600/20 border border-slate-400/40 text-slate-200 rounded-lg hover:bg-slate-600/30 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        )}

        {/* Entry Management */}
        <div className="bg-slate-800/60 rounded-lg p-4">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-slate-200">Entry Management</h3>
            <div className="flex gap-3">
              <button
                onClick={handleSelectAll}
                className="px-3 py-1 bg-slate-600/40 text-slate-200 rounded text-sm hover:bg-slate-600/60 transition-colors"
              >
                {selectedEntries.length === entries.length ? 'Deselect All' : 'Select All'}
              </button>
              {selectedEntries.length > 0 && (
                <button
                  onClick={handleBulkDelete}
                  className="px-3 py-1 bg-red-600/40 text-red-200 rounded text-sm hover:bg-red-600/60 transition-colors"
                >
                  Delete Selected ({selectedEntries.length})
                </button>
              )}
            </div>
          </div>
          
          <div className="max-h-64 overflow-y-auto space-y-2">
            {entries.map(entry => (
              <div key={entry.id} className="flex items-center gap-3 p-2 bg-slate-700/40 rounded">
                <input
                  type="checkbox"
                  checked={selectedEntries.includes(entry.id)}
                  onChange={() => handleSelectEntry(entry.id)}
                  className="rounded"
                />
                <div className="flex-1 min-w-0">
                  <div className="font-medium text-slate-200 truncate">{entry.title}</div>
                  <div className="text-sm text-slate-400">{entry.date} ‚Ä¢ {entry.xpEarned} XP</div>
                </div>
                <div className="flex gap-1">
                  {entry.tags.slice(0, 3).map((tag, index) => (
                    <span key={index} className="px-2 py-1 bg-slate-600/60 text-xs text-slate-300 rounded">
                      {tag}
                    </span>
                  ))}
                  {entry.tags.length > 3 && (
                    <span className="px-2 py-1 bg-slate-600/60 text-xs text-slate-300 rounded">
                      +{entry.tags.length - 3}
                    </span>
                  )}
                </div>
              </div>
            ))}
          </div>
          
          {entries.length === 0 && (
            <div className="text-center py-8 text-slate-400">
              No journal entries found.
            </div>
          )}
        </div>
      </div>
    </div>
  );
}